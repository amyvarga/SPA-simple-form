{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport validate from './validation';\nimport calculateTotalFees from '../../calculateTotalFees';\n\nconst FeeCharges = ({\n  render,\n  maxMonths,\n  currency\n}) => {\n  const _useState = useState({\n    start: null,\n    month: null,\n    fee: null\n  }),\n        calc = _useState[0],\n        setCalc = _useState[1];\n\n  const formik = useFormik({\n    initialValues: {\n      start: 500,\n      month: 250\n    },\n    validate,\n    onSubmit: ({\n      start,\n      month\n    }, {\n      setSubmitting\n    }) => {\n      const myFees = calculateTotalFees(start, month, maxMonths).toFixed(2);\n      setCalc({\n        start: start,\n        month: month,\n        fee: myFees\n      });\n      setSubmitting(false);\n    }\n  });\n  return render(_objectSpread({}, formik, {\n    maxMonths,\n    calc,\n    currency\n  }));\n};\n\nexport default FeeCharges;","map":null,"metadata":{},"sourceType":"module"}