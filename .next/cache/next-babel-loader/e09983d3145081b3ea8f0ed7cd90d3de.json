{"ast":null,"code":"const calculateTotalFees = (startingContribution, monthlyContribution, months) => {\n  startingContribution = Number(startingContribution);\n  monthlyContribution = Number(monthlyContribution);\n  months = Number(months);\n  const feeCharge = 0.0625 / 100;\n  let accunulatedWealth = startingContribution;\n  let totalFee = 0;\n  let monthlyFee = 0;\n  let i = 1;\n\n  while (i < months) {\n    i++;\n    accunulatedWealth = accunulatedWealth + monthlyContribution - monthlyFee;\n    monthlyFee = (accunulatedWealth * feeCharge).toFixed(14);\n    totalFee = (parseFloat(totalFee) + parseFloat(monthlyFee)).toFixed(14);\n  }\n\n  return parseFloat(totalFee);\n};\n\nexport default calculateTotalFees;","map":{"version":3,"sources":["/Users/amyvarga/web/nutmeg/src/calculateTotalFees.js"],"names":["calculateTotalFees","startingContribution","monthlyContribution","months","Number","feeCharge","accunulatedWealth","totalFee","monthlyFee","i","toFixed","parseFloat"],"mappings":"AAAA,MAAMA,kBAAkB,GAAG,CACzBC,oBADyB,EAEzBC,mBAFyB,EAGzBC,MAHyB,KAItB;AACHF,EAAAA,oBAAoB,GAAGG,MAAM,CAACH,oBAAD,CAA7B;AACAC,EAAAA,mBAAmB,GAAGE,MAAM,CAACF,mBAAD,CAA5B;AACAC,EAAAA,MAAM,GAAGC,MAAM,CAACD,MAAD,CAAf;AACA,QAAME,SAAS,GAAG,SAAS,GAA3B;AACA,MAAIC,iBAAiB,GAAGL,oBAAxB;AACA,MAAIM,QAAQ,GAAG,CAAf;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGN,MAAX,EAAmB;AACjBM,IAAAA,CAAC;AACDH,IAAAA,iBAAiB,GAAGA,iBAAiB,GAAGJ,mBAApB,GAA0CM,UAA9D;AACAA,IAAAA,UAAU,GAAG,CAACF,iBAAiB,GAAGD,SAArB,EAAgCK,OAAhC,CAAwC,EAAxC,CAAb;AACAH,IAAAA,QAAQ,GAAG,CAACI,UAAU,CAACJ,QAAD,CAAV,GAAuBI,UAAU,CAACH,UAAD,CAAlC,EAAgDE,OAAhD,CAAwD,EAAxD,CAAX;AACD;;AACD,SAAOC,UAAU,CAACJ,QAAD,CAAjB;AACD,CApBD;;AAsBA,eAAeP,kBAAf","sourcesContent":["const calculateTotalFees = (\n  startingContribution,\n  monthlyContribution,\n  months\n) => {\n  startingContribution = Number(startingContribution);\n  monthlyContribution = Number(monthlyContribution);\n  months = Number(months);\n  const feeCharge = 0.0625 / 100;\n  let accunulatedWealth = startingContribution;\n  let totalFee = 0;\n  let monthlyFee = 0;\n  let i = 1;\n  while (i < months) {\n    i++;\n    accunulatedWealth = accunulatedWealth + monthlyContribution - monthlyFee;\n    monthlyFee = (accunulatedWealth * feeCharge).toFixed(14);\n    totalFee = (parseFloat(totalFee) + parseFloat(monthlyFee)).toFixed(14);\n  }\n  return parseFloat(totalFee);\n};\n\nexport default calculateTotalFees;\n"]},"metadata":{},"sourceType":"module"}