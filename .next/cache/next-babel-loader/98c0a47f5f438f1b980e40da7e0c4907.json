{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport validate from './validation';\nimport calculateTotalFees from '../../calculateTotalFees';\n\nconst FeeCharges = ({\n  render,\n  maxMonths,\n  currency\n}) => {\n  const {\n    0: calc,\n    1: setCalc\n  } = useState({\n    start: null,\n    month: null,\n    fee: null\n  });\n  const formik = useFormik({\n    initialValues: {\n      start: 500,\n      month: 250\n    },\n    validate,\n    onSubmit: ({\n      start,\n      month\n    }, {\n      setSubmitting\n    }) => {\n      const myFees = calculateTotalFees(start, month, maxMonths).toFixed(2);\n      setCalc({\n        start: start,\n        month: month,\n        fee: myFees\n      });\n      setSubmitting(false);\n    }\n  });\n  return render(_objectSpread({}, formik, {\n    maxMonths,\n    calc,\n    currency\n  }));\n};\n\nexport default FeeCharges;","map":{"version":3,"sources":["/Users/amyvarga/web/nutmeg/src/container/feeCharges/FeeCharges.js"],"names":["useState","useFormik","validate","calculateTotalFees","FeeCharges","render","maxMonths","currency","calc","setCalc","start","month","fee","formik","initialValues","onSubmit","setSubmitting","myFees","toFixed"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,SAAV;AAAqBC,EAAAA;AAArB,CAAD,KAAqC;AACtD,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBT,QAAQ,CAAC;AAC/BU,IAAAA,KAAK,EAAE,IADwB;AAE/BC,IAAAA,KAAK,EAAE,IAFwB;AAG/BC,IAAAA,GAAG,EAAE;AAH0B,GAAD,CAAhC;AAKA,QAAMC,MAAM,GAAGZ,SAAS,CAAC;AACvBa,IAAAA,aAAa,EAAE;AACbJ,MAAAA,KAAK,EAAE,GADM;AAEbC,MAAAA,KAAK,EAAE;AAFM,KADQ;AAKvBT,IAAAA,QALuB;AAMvBa,IAAAA,QAAQ,EAAE,CAAC;AAAEL,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAD,EAAmB;AAAEK,MAAAA;AAAF,KAAnB,KAAyC;AACjD,YAAMC,MAAM,GAAGd,kBAAkB,CAACO,KAAD,EAAQC,KAAR,EAAeL,SAAf,CAAlB,CAA4CY,OAA5C,CAAoD,CAApD,CAAf;AACAT,MAAAA,OAAO,CAAC;AACNC,QAAAA,KAAK,EAAEA,KADD;AAENC,QAAAA,KAAK,EAAEA,KAFD;AAGNC,QAAAA,GAAG,EAAEK;AAHC,OAAD,CAAP;AAKAD,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AAdsB,GAAD,CAAxB;AAgBA,SAAOX,MAAM,mBAAMQ,MAAN;AAAcP,IAAAA,SAAd;AAAyBE,IAAAA,IAAzB;AAA+BD,IAAAA;AAA/B,KAAb;AACD,CAvBD;;AAyBA,eAAeH,UAAf","sourcesContent":["import { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport validate from './validation';\nimport calculateTotalFees from '../../calculateTotalFees';\n\nconst FeeCharges = ({ render, maxMonths, currency }) => {\n  const [calc, setCalc] = useState({\n    start: null,\n    month: null,\n    fee: null\n  });\n  const formik = useFormik({\n    initialValues: {\n      start: 500,\n      month: 250\n    },\n    validate,\n    onSubmit: ({ start, month }, { setSubmitting }) => {\n      const myFees = calculateTotalFees(start, month, maxMonths).toFixed(2);\n      setCalc({\n        start: start,\n        month: month,\n        fee: myFees\n      });\n      setSubmitting(false);\n    }\n  });\n  return render({ ...formik, maxMonths, calc, currency });\n};\n\nexport default FeeCharges;"]},"metadata":{},"sourceType":"module"}